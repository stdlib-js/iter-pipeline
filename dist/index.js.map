{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isArrayLike = require( '@stdlib/assert-is-array-like-object' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator pipeline.\n*\n* @param {(Function|FunctionArray)} iterFcn0 - iterator function or an array of iterator functions\n* @param {...Function} [iterFcn] - iterator function(s)\n* @throws {TypeError} all arguments must be functions\n* @throws {Error} must provide at least one iterator function\n* @returns {Function} iterator pipeline\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iterSomeBy = require( '@stdlib/iter-some-by' );\n* var iterHead = require( '@stdlib/iter-head' );\n* var iterThunk = require( '@stdlib/iter-pipeline-thunk' );\n*\n* function threshold( r ) {\n*     return ( r > 0.95 );\n* }\n*\n* var it1 = iterThunk( iterHead, 100 );\n* var it2 = iterThunk( iterSomeBy, 5, threshold );\n*\n* var p = iterPipeline( it1, it2 );\n*\n* var bool = p( randu() );\n* // returns <boolean>\n*/\nfunction iterPipeline() {\n\tvar nFuncs;\n\tvar f;\n\tvar i;\n\n\tnFuncs = arguments.length;\n\tif ( nFuncs === 1 && isArrayLike( arguments[ 0 ] ) ) {\n\t\tf = arguments[ 0 ].slice();\n\t\tnFuncs = f.length;\n\t} else {\n\t\tf = [];\n\t\tfor ( i = 0; i < nFuncs; i++ ) {\n\t\t\tf.push( arguments[ i ] );\n\t\t}\n\t}\n\tif ( nFuncs === 0 ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide at least one iterator function.' );\n\t}\n\tfor ( i = 0; i < nFuncs; i++ ) {\n\t\tif ( !isFunction( f[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid arguments. All arguments must be functions. Value: `%s`.', f[ i ] ) );\n\t\t}\n\t}\n\treturn pipeline;\n\n\t/**\n\t* Pipeline function.\n\t*\n\t* @private\n\t* @param {Iterator} iterator - source iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @throws {TypeError} each iterator function, except the last iterator function, within an iterator pipeline must return an iterator\n\t* @returns {(Iterator|*)} an iterator or pipeline result\n\t*/\n\tfunction pipeline( iterator ) {\n\t\tvar iter;\n\t\tif ( !isIteratorLike( iterator ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t\t}\n\t\titer = iterator;\n\t\tfor ( i = 0; i < nFuncs-1; i++ ) {\n\t\t\titer = f[ i ]( iter );\n\t\t\tif ( !isIteratorLike( iter ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Each iterator function, except the last iterator function, within an iterator pipeline must return an iterator. Value: `%s`.', iter ) );\n\t\t\t}\n\t\t}\n\t\treturn f[ nFuncs-1 ]( iter );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterPipeline;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator pipeline.\n*\n* @module @stdlib/iter-pipeline\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iterSomeBy = require( '@stdlib/iter-some-by' );\n* var iterHead = require( '@stdlib/iter-head' );\n* var iterThunk = require( '@stdlib/iter-pipeline-thunk' );\n* var iterPipeline = require( '@stdlib/iter-pipeline' );\n*\n* function threshold( r ) {\n*     return ( r > 0.95 );\n* }\n*\n* var it1 = iterThunk( iterHead, 100 );\n* var it2 = iterThunk( iterSomeBy, 5, threshold );\n*\n* var p = iterPipeline( it1, it2 );\n*\n* var bool = p( randu() );\n* // returns <boolean>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,4BAA6B,EACnDC,EAAc,QAAS,qCAAsC,EAC7DC,EAAiB,QAAS,iCAAkC,EAC5DC,EAAS,QAAS,uBAAwB,EAgC9C,SAASC,GAAe,CACvB,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAS,UAAU,OACdA,IAAW,GAAKJ,EAAa,UAAW,CAAE,CAAE,EAChDK,EAAI,UAAW,CAAE,EAAE,MAAM,EACzBD,EAASC,EAAE,WAGX,KADAA,EAAI,CAAC,EACCC,EAAI,EAAGA,EAAIF,EAAQE,IACxBD,EAAE,KAAM,UAAWC,CAAE,CAAE,EAGzB,GAAKF,IAAW,EACf,MAAM,IAAI,MAAO,sEAAuE,EAEzF,IAAME,EAAI,EAAGA,EAAIF,EAAQE,IACxB,GAAK,CAACP,EAAYM,EAAGC,CAAE,CAAE,EACxB,MAAM,IAAI,UAAWJ,EAAQ,mEAAoEG,EAAGC,CAAE,CAAE,CAAE,EAG5G,OAAOC,EAWP,SAASA,EAAUC,EAAW,CAC7B,IAAIC,EACJ,GAAK,CAACR,EAAgBO,CAAS,EAC9B,MAAM,IAAI,UAAWN,EAAQ,2DAA4DM,CAAS,CAAE,EAGrG,IADAC,EAAOD,EACDF,EAAI,EAAGA,EAAIF,EAAO,EAAGE,IAE1B,GADAG,EAAOJ,EAAGC,CAAE,EAAGG,CAAK,EACf,CAACR,EAAgBQ,CAAK,EAC1B,MAAM,IAAI,UAAWP,EAAQ,iJAAkJO,CAAK,CAAE,EAGxL,OAAOJ,EAAGD,EAAO,CAAE,EAAGK,CAAK,CAC5B,CACD,CAKAX,EAAO,QAAUK,IC/DjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isArrayLike", "isIteratorLike", "format", "iterPipeline", "nFuncs", "f", "i", "pipeline", "iterator", "iter", "main"]
}
